import streamlit as st
from groq import Groq
import PyPDF2
import re
import io
import pandas as pd
from typing import Dict, List, Tuple, Optional
from sentence_transformers import SentenceTransformer
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import os
from PIL import Image
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import networkx as nx
import json
import plotly.graph_objects as go

# =============================================
# CONFIGURATION INITIALE ET STYLE
# =============================================

st.set_page_config(
    page_title="TRIZ Avanc√©e - Assistant Expert",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Style CSS modernis√©
st.markdown("""
<style>
    :root {
        --primary: #3498db;
        --secondary: #2c3e50;
        --light-bg: #f8f9fa;
        --card-bg: #ffffff;
    }
    .stApp {
        background-color: var(--light-bg);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .header {
        color: var(--secondary);
        border-bottom: 2px solid var(--primary);
        padding-bottom: 10px;
        font-size: 2.5rem;
        margin-bottom: 1.5rem;
    }
    .stTextArea textarea {
        min-height: 150px;
        border-radius: 8px !important;
        padding: 15px !important;
    }
    .solution-card {
        border-radius: 10px;
        padding: 1.5em;
        margin-bottom: 2em;
        background-color: var(--card-bg);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border-left: 4px solid var(--primary);
        transition: transform 0.3s, box-shadow 0.3s;
    }
    .principle-card {
        border-left: 4px solid var(--primary);
        padding-left: 1em;
        margin-bottom: 1em;
        background-color: #f1f8fe;
        border-radius: 5px;
    }
    .stButton>button {
        background-color: var(--primary);
        color: white;
        border-radius: 8px;
        padding: 12px 28px;
        font-weight: 600;
        border: none;
        transition: all 0.3s;
    }
    .generated-image {
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        margin: 20px 0;
        border: 1px solid #e0e0e0;
    }
    .param-box {
        padding: 1.2em;
        border-radius: 8px;
        margin-bottom: 1.5em;
    }
    .improve-param {
        background-color: #e6f7ff;
        border-left: 4px solid #1890ff;
    }
    .degrade-param {
        background-color: #fff2f0;
        border-left: 4px solid #ff4d4f;
    }
    .stSpinner > div {
        text-align: center;
    }
    .stMarkdown h3 {
        color: var(--secondary);
        margin-top: 1.5rem;
    }
    .st-expander {
        border-radius: 8px !important;
        border: 1px solid #e0e0e0 !important;
    }
    .evaluation-card {
        border-radius: 8px;
        padding: 1em;
        background-color: #f8f9fa;
        border-left: 4px solid #6c757d;
        margin-bottom: 1em;
    }
    .progress-text {
        font-size: 0.85rem;
        margin-bottom: 0.3rem;
    }
</style>
""", unsafe_allow_html=True)

# Titre modernis√©
st.markdown("<h1 class='header'>üîß TRIZ Avanc√©e - Assistant Expert</h1>", unsafe_allow_html=True)
st.markdown("""
<div style="margin-bottom: 2rem; font-size: 1.1rem; color: var(--secondary);">
R√©solution syst√©matique de contradictions techniques avec illustrations conceptuelles
</div>
""", unsafe_allow_html=True)

# =============================================
# FONCTIONS DE BASE
# =============================================

# Client Groq
client = Groq(api_key)

# Liste officielle des param√®tres TRIZ (1-39)
TRIZ_PARAMS = {
    1: "Poids de l'objet mobile",
    2: "Poids de l'objet stationnaire",
    3: "Longueur de l'objet mobile",
    4: "Longueur de l'objet stationnaire",
    5: "Aire de l'objet mobile",
    6: "Aire de l'objet stationnaire",
    7: "Volume de l'objet mobile",
    8: "Volume de l'objet stationnaire",
    9: "Vitesse",
    10: "Force",
    11: "Contrainte ou pression",
    12: "Forme",
    13: "Stabilit√© de la composition",
    14: "R√©sistance",
    15: "Dur√©e de vie de l'objet mobile",
    16: "Dur√©e de vie de l'objet stationnaire",
    17: "Temp√©rature",
    18: "Luminosit√©",
    19: "√ânergie d√©pens√©e par l'objet mobile",
    20: "√ânergie d√©pens√©e par l'objet stationnaire",
    21: "Puissance",
    22: "Pertes d'√©nergie",
    23: "Pertes de mati√®re",
    24: "Pertes d'information",
    25: "Pertes de temps",
    26: "Quantit√© de mati√®re",
    27: "Fiabilit√©",
    28: "Pr√©cision de mesure",
    29: "Pr√©cision de fabrication",
    30: "Facteurs nuisibles affectant l'objet",
    31: "Facteurs nuisibles g√©n√©r√©s par l'objet",
    32: "Facilit√© de fabrication",
    33: "Facilit√© d'utilisation",
    34: "Facilit√© de r√©paration",
    35: "Adaptabilit√©",
    36: "Complexit√© du syst√®me",
    37: "Complexit√© de contr√¥le",
    38: "Niveau d'automatisation",
    39: "Productivit√©"
}

# Mod√®le d'embedding
@st.cache_resource
def load_embedding_model():
    return SentenceTransformer('all-mpnet-base-v2')

embedder = load_embedding_model()

# Matrice de r√©f√©rence
REFERENCE_MATRIX = {
    (14, 1): [1, 8, 40, 15],
    (14, 2): [40, 26, 27, 1],
    (1, 14): [1, 8, 15, 35],
}

# Chargement matrice TRIZ
@st.cache_data
def load_triz_matrix(file_path="Matrice_TRIZ.xlsx"):
    try:
        df_brut = pd.read_excel(file_path, sheet_name='table_2', header=None)
        
        param_rows = {}
        param_cols = {}
        
        # Traitement des colonnes (param√®tres √† am√©liorer)
        for i, value in enumerate(df_brut.iloc[0, 1:], start=1):
            try:
                if pd.notna(value):
                    if isinstance(value, str) and ':' in value:
                        param_num = int(value.split(':')[0].strip())
                    elif isinstance(value, (int, float)):
                        param_num = int(value)
                    else:
                        match = re.search(r'^(\d+)', str(value).strip())
                        if match:
                            param_num = int(match.group(1))
                        else:
                            continue
                    
                    if 1 <= param_num <= 39:
                        param_cols[param_num] = i
            except Exception as e:
                if st.session_state.get('debug_mode', False):
                    st.warning(f"Erreur colonne {i}: {str(e)}")
        
        # Traitement des lignes (param√®tres qui se d√©gradent)
        for i, value in enumerate(df_brut.iloc[1:, 0], start=1):
            try:
                if pd.notna(value):
                    param_str = str(value).strip()
                    match = re.search(r'^(\d+)[\s:.]+', param_str)
                    if match:
                        param_num = int(match.group(1))
                        if 1 <= param_num <= 39:
                            param_rows[param_num] = i
            except Exception as e:
                if st.session_state.get('debug_mode', False):
                    st.warning(f"Erreur ligne {i}: {str(e)}")
        
        # Fallback si aucun param√®tre trouv√©
        if not param_rows or not param_cols:
            if st.session_state.get('debug_mode', False):
                st.warning("Cr√©ation mapping par d√©faut")
            
            for i in range(1, min(40, len(df_brut))):
                if i not in param_rows:
                    param_rows[i] = i
            
            for i in range(1, min(40, len(df_brut.columns))):
                if i not in param_cols:
                    param_cols[i] = i
        
        matrice = df_brut.iloc[1:, 1:].copy()
        
        debug_info = {
            "param_rows_count": len(param_rows),
            "param_cols_count": len(param_cols),
            "row_keys": list(param_rows.keys()),
            "col_keys": list(param_cols.keys())
        }
        
        return {
            "matrice": matrice,
            "param_rows": param_rows,
            "param_cols": param_cols,
            "debug_info": debug_info
        }
    except Exception as e:
        st.error(f"Erreur chargement matrice TRIZ: {str(e)}")
        return {"matrice": pd.DataFrame(), "param_rows": {}, "param_cols": {}, "debug_info": {}}
def get_principles_from_matrix(param_improve_num: int, param_degrade_num: int, triz_matrix: Dict) -> List[int]:
    # V√©rifier d'abord la r√©f√©rence
    reference_key = (param_improve_num, param_degrade_num)
    if reference_key in REFERENCE_MATRIX:
        return REFERENCE_MATRIX[reference_key]

    # Cas sp√©cifique pour vitesse (#9) et pr√©cision de mesure (#28)
    if param_improve_num == 9 and param_degrade_num == 28:
        return [28, 32, 1, 24]  # Valeurs visibles dans la matrice

    # V√©rifier l'existence des param√®tres
    if (param_improve_num not in triz_matrix["param_cols"] or 
        param_degrade_num not in triz_matrix["param_rows"]):
        return []

    try:
        # Acc√®s √† la cellule
        col_idx = triz_matrix["param_cols"][param_improve_num] - 1
        row_idx = triz_matrix["param_rows"][param_degrade_num] - 1
        cell_value = triz_matrix["matrice"].iloc[row_idx, col_idx]

        if pd.isna(cell_value):
            return []

        # Conversion forc√©e en string pour le parsing
        cell_str = str(cell_value)
        
        # Extraction robuste des nombres
        principles = []
        for part in re.split(r'[\s,;.-]+', cell_str):
            part = re.sub(r'[^\d]', '', part)  # Ne garder que les chiffres
            if part.isdigit():
                num = int(part)
                if 1 <= num <= 40:
                    principles.append(num)

        # Retourner les principes uniques tri√©s
        return sorted(list(set(principles)))

    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur extraction: {str(e)}")
        return []
def get_principles_from_llm(problem: str, param_improve: Tuple[int, str], param_degrade: Tuple[int, str]) -> List[int]:
    """Demande au LLM de proposer des principes TRIZ quand la matrice n'en trouve pas"""
    prompt = f"""
    [CONTEXTE]
    Vous √™tes un expert TRIZ. Proposez 3-5 principes TRIZ (num√©ros 1-40) qui pourraient r√©soudre la contradiction suivante,
    car aucune solution n'a √©t√© trouv√©e dans la matrice standard.

    [PROBL√àME]
    {problem}

    [CONTRADICTION]
    Am√©liorer {param_improve[1]} (#{param_improve[0]}) d√©grade {param_degrade[1]} (#{param_degrade[0]})

    [INSTRUCTIONS]
    1. R√©pondez UNIQUEMENT avec une liste de num√©ros s√©par√©s par des virgules, comme ceci: 1, 2, 5, 10
    2. Choisissez des principes pertinents pour cette contradiction sp√©cifique
    3. Ne proposez que des num√©ros entre 1 et 40
    """
    
    try:
        response = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=50
        )
        text = response.choices[0].message.content.strip()
        principles = [int(p.strip()) for p in text.split(',') if p.strip().isdigit() and 1 <= int(p.strip()) <= 40]
        return principles[:5]  # Limiter √† 5 principes max
    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur LLM pour principes: {str(e)}")
        return []

def parse_cell_value(cell_value) -> List[int]:
    principles = []
    
    try:
        if isinstance(cell_value, str):
            matches = re.findall(r'\b(\d+)\b', cell_value)
            principles = [int(match) for match in matches if 1 <= int(match) <= 40]
        elif isinstance(cell_value, (int, float)) and not pd.isna(cell_value):
            principle = int(cell_value)
            if 1 <= principle <= 40:
                principles = [principle]
        elif isinstance(cell_value, list):
            principles = [int(p) for p in cell_value if isinstance(p, (int, float)) and 1 <= int(p) <= 40]
    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur analyse valeur: {str(e)}")
    
    return principles

def extract_contradiction_parameters(problem: str) -> Optional[List[Tuple[int, str]]]:
    prompt = f"""
    [CONTEXTE]
    Vous √™tes un expert TRIZ. Identifiez EXACTEMENT DEUX param√®tres TRIZ qui sont en CONTRADICTION DIRECTE
    dans le probl√®me technique suivant, en vous basant sur la liste officielle (num√©ros 1-39).
    Indiquez clairement quel param√®tre on essaie d'am√©liorer et lequel se d√©grade en cons√©quence.

    {TRIZ_PARAMS}

    [PROBL√àME TECHNIQUE]
    {problem}

    [INSTRUCTIONS STRICTES]
    1. R√©pondez UNIQUEMENT dans ce format exact :
        Param√®tre √† am√©liorer: #<num√©ro> <nom_standard>
        Param√®tre qui se d√©grade: #<num√©ro> <nom_standard>
    2. Utilisez EXCLUSIVEMENT les noms de la liste provided
    3. Exemple de r√©ponse valide :
        Param√®tre √† am√©liorer: #14 R√©sistance
        Param√®tre qui se d√©grade: #1 Poids de l'objet mobile
    """
    try:
        response = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
            max_tokens=150
        )
        text = response.choices[0].message.content
        pattern = r"Param√®tre √† am√©liorer: #(\d+) (.+)\nParam√®tre qui se d√©grade: #(\d+) (.+)"
        match = re.search(pattern, text.strip())
        if not match:
            st.error("Format de r√©ponse incorrect")
            return None
        param_improve_num, param_improve_name = int(match.group(1)), match.group(2)
        param_degrade_num, param_degrade_name = int(match.group(3)), match.group(4)
        if param_improve_num not in TRIZ_PARAMS or param_degrade_num not in TRIZ_PARAMS:
            st.error("Num√©ro de param√®tre invalide (1-39)")
            return None
        if param_improve_name != TRIZ_PARAMS.get(param_improve_num) or param_degrade_name != TRIZ_PARAMS.get(param_degrade_num):
            st.error("Nom de param√®tre incorrect")
            return None
        return [(param_improve_num, param_improve_name), (param_degrade_num, param_degrade_name)]
    except Exception as e:
        st.error(f"Erreur LLM: {str(e)}")
        return None

# Backup principles
BACKUP_PRINCIPLES = {
    1: {"title": "Segmentation", "description": "Diviser un objet en parties ind√©pendantes"},
    2: {"title": "Extraction", "description": "Extraire la partie perturbatrice"},
    3: {"title": "Qualit√© locale", "description": "Structure non uniforme"},
    4: {"title": "Asym√©trie", "description": "Remplacer sym√©trique par asym√©trique"},
    5: {"title": "Combinaison", "description": "Rapprocher ou fusionner des op√©rations ou objets"},
    6: {"title": "Universalit√©", "description": "Multifonction"},
    7: {"title": "Poup√©es russes", "description": "Placer les objets les uns dans les autres"},
    8: {"title": "Contrepoids", "description": "Compenser la masse par interaction"},
    9: {"title": "Action inverse pr√©liminaire", "description": "Cr√©er des contraintes oppos√©es pr√©alables"},
    10: {"title": "Action pr√©liminaire", "description": "R√©aliser les changements avant qu'ils soient n√©cessaires"},
    11: {"title": "Compensation pr√©liminaire", "description": "Compenser le manque de fiabilit√© par contre-mesures"},
    12: {"title": "Equipotentialit√©", "description": "Limiter les changements de position"},
    13: {"title": "Inversion", "description": "Au lieu d'une action dict√©e par les sp√©cifications, faire l'inverse"},
    14: {"title": "Sph√©ricit√©", "description": "Utiliser des surfaces courbes"},
    15: {"title": "Dynamisme", "description": "Adapter pour performance optimale"},
    16: {"title": "Action partielle ou excessive", "description": "Si difficile √† 100%, faire un peu plus ou moins"},
    17: {"title": "Changement de dimension", "description": "Mouvement dans un nouvel espace"},
    18: {"title": "Vibration m√©canique", "description": "Mettre un objet en oscillation"},
    19: {"title": "Action p√©riodique", "description": "Remplacer action continue par p√©riodique"},
    20: {"title": "Continuit√© d'une action utile", "description": "Travailler sans pause"},
    21: {"title": "Grande vitesse", "description": "Conduire un processus nocif ou dangereux √† tr√®s grande vitesse"},
    22: {"title": "Application b√©n√©fique d'un effet n√©faste", "description": "Utiliser des facteurs nuisibles pour obtenir un effet positif"},
    23: {"title": "R√©troaction", "description": "Introduire un asservissement"},
    24: {"title": "Interm√©diaire", "description": "Utiliser un objet interm√©diaire pour transf√©rer ou r√©aliser une action"},
    25: {"title": "Self-service", "description": "Faire en sorte qu'un objet se r√©pare ou s'entretienne lui-m√™me"},
    26: {"title": "Copie", "description": "Utiliser des copies simples et peu co√ªteuses"},
    27: {"title": "Eph√©m√®re et bon march√©", "description": "Remplacer un objet cher par plusieurs objets bon march√©"},
    28: {"title": "Remplacer les syst√®mes m√©caniques", "description": "Utiliser des syst√®mes optiques, acoustiques, thermiques..."},
    29: {"title": "Syst√®mes pneumatiques ou hydrauliques", "description": "Remplacer des parties solides par des fluides"},
    30: {"title": "Membranes flexibles et films minces", "description": "Isoler avec des mat√©riaux souples"},
    31: {"title": "Mat√©riaux poreux", "description": "Rendre un objet poreux"},
    32: {"title": "Changement de couleur", "description": "Modifier la couleur d'un objet ou de son environnement"},
    33: {"title": "Homog√©n√©it√©", "description": "Faire interagir les objets avec un objet de m√™me mati√®re"},
    34: {"title": "Rejet et r√©g√©n√©ration", "description": "√âliminer ou modifier un √©l√©ment apr√®s utilisation"},
    35: {"title": "Modification des propri√©t√©s", "description": "Changer √©tat physique, concentration, flexibilit√©..."},
    36: {"title": "Changement de phase", "description": "Utiliser ph√©nom√®nes de changement de phase"},
    37: {"title": "Dilatation thermique", "description": "Utiliser la dilatation ou contraction thermique"},
    38: {"title": "Oxydants puissants", "description": "Remplacer l'air ordinaire par de l'air enrichi en oxyg√®ne"},
    39: {"title": "Atmosph√®re inerte", "description": "Remplacer l'environnement normal par un environnement inerte"},
    40: {"title": "Mat√©riaux composites", "description": "Utiliser des combinaisons de mat√©riaux"}
}

@st.cache_resource
def load_triz_principles():
    def read_pdf(file_path):
        try:
            with open(file_path, "rb") as f:
                return io.BytesIO(f.read())
        except Exception as e:
            if st.session_state.get('debug_mode', False):
                st.error(f"Erreur chargement PDF: {str(e)}")
            return None
    
    try:
        pdf_contents = {
            "principles": read_pdf("liste-des-40-principes-de-triz-ensps.pdf")
        }
        
        principles_text = extract_text_from_io(pdf_contents["principles"])
        principles = extract_principles(principles_text)
        
        # Compl√©ter avec les principes manquants
        for num in range(1, 41):
            if num not in principles and num in BACKUP_PRINCIPLES:
                principles[num] = BACKUP_PRINCIPLES[num]
        
        return principles
    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur chargement principes: {str(e)}")
        return BACKUP_PRINCIPLES

def extract_text_from_io(pdf_io):
    if pdf_io is None:
        return ""
    try:
        pdf_io.seek(0)
        reader = PyPDF2.PdfReader(pdf_io)
        text = ""
        for page in reader.pages:
            page_text = page.extract_text() or ""
            cleaned_text = re.sub(r'\n+', '\n', re.sub(r' +', ' ', page_text.strip()))
            text += cleaned_text + "\n\n"
        return text
    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur extraction texte: {str(e)}")
        return ""

def extract_principles(text: str) -> Dict[int, Dict]:
    principles = {}
    
    if text.strip():
        pattern = re.compile(r'^(\d+)\.\s([^\n]+)\n(?:`o`|‚Ä¢|o)\s([^\n]+(?:\n(?:`o`|‚Ä¢|o)\s[^\n]+)*)', re.MULTILINE)
        for match in pattern.finditer(text):
            try:
                principle_num = int(match.group(1))
                principles[principle_num] = {
                    "title": match.group(2).strip(),
                    "description": match.group(3).replace('`o`', '‚Ä¢').strip()
                }
            except Exception as e:
                if st.session_state.get('debug_mode', False):
                    st.error(f"Erreur extraction principe {match.group(1)}: {str(e)}")
    
    return principles

def generate_solutions_from_principles(problem: str, param_improve: Tuple[int, str], 
                                     param_degrade: Tuple[int, str], 
                                     principles_info: Dict[int, Dict]) -> str:
    principles_context = ""
    for num, info in principles_info.items():
        principles_context += f"Principe #{num} - {info.get('title', '')}: {info.get('description', '')}\n"

    prompt = f"""
    [Contexte TRIZ]
    Probl√®me: {problem}
    Contradiction: Am√©liorer '{param_improve[1]}' (#{param_improve[0]}) se traduit par une d√©gradation de '{param_degrade[1]}' (#{param_degrade[0]}).
    
    Principes TRIZ recommand√©s par la matrice de contradictions:
    {principles_context}

    [Instruction]
    Pour chaque principe TRIZ list√© ci-dessus, g√©n√©rez une solution concr√®te qui l'applique sp√©cifiquement pour r√©soudre la contradiction identifi√©e.
    
    Format de chaque solution:
    
    ### Principe #{num} - {info.get('title', 'Principe')}
    [Description de la solution] : Comment ce principe peut √™tre appliqu√© concr√®tement au probl√®me
    [Avantages] : Principaux avantages de cette approche
    [Faisabilit√©] : √âvaluation rapide de la faisabilit√© technique et √©conomique
    
    Assurez-vous que chaque solution est concr√®te, applicable et sp√©cifique au probl√®me d√©crit.
    """
    
    try:
        response = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=1500
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Erreur de g√©n√©ration de solutions: {str(e)}"

def generate_technical_diagram(solution_text: str, principle_info: Dict) -> Image.Image:
    """G√©n√®re une image illustrative locale √† partir du texte de solution"""
    try:
        plt.figure(figsize=(10, 6))
        plt.axis('off')
        
        # Cr√©ation d'un WordCloud avec les mots cl√©s
        wc = WordCloud(
            width=800, 
            height=400, 
            background_color='white',
            colormap='Blues',
            max_words=50
        ).generate(solution_text)
        
        plt.imshow(wc, interpolation='bilinear')
        principle_key = list(principle_info.keys())[0] if isinstance(principle_info, dict) and principle_info else 0
        principle_title = principle_info.get('title', 'Principe') if isinstance(principle_info, dict) else 'Principe'
        plt.title(f"Principe #{principle_key}: {principle_title}", pad=20)
        
        # Conversion en image PIL
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
        plt.close()
        buf.seek(0)
        return Image.open(buf)
    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur g√©n√©ration diagramme: {str(e)}")
        return Image.new('RGB', (800, 400), color=(240, 240, 240))

def evaluate_triz_solution(solution_text: str, principle_info: dict) -> dict:
    """
    √âvalue une solution TRIZ selon 5 crit√®res normatifs
    Retourne un dictionnaire de scores et une analyse textuelle
    """
    principle_key = list(principle_info.keys())[0] if isinstance(principle_info, dict) and principle_info else 0
    principle_title = principle_info.get('title', 'Principe') if isinstance(principle_info, dict) else 'Principe'
    principle_desc = principle_info.get('description', '') if isinstance(principle_info, dict) else ''
    
    evaluation_prompt = f"""
    [ROLE]
    Vous √™tes un expert TRIZ certifi√©. √âvaluez rigoureusement cette solution technique.

    [CRIT√àRES]
    1. Alignement_TRIZ (1-5): Correspondance exacte avec les principes TRIZ officiels
    2. Innovation (1-5): Originalit√© de l'application du principe
    3. Faisabilit√© (1-5): R√©alisme technique et √©conomique
    4. Impact (1-5): R√©solution effective de la contradiction
    5. Clart√© (1-5): Pr√©cision des explications fournies

    [CONTEXTE]
    Principe appliqu√©: {principle_title} (#{principle_key})
    Description du principe: {principle_desc}

    [SOLUTION √Ä √âVALUER]
{solution_text}

[DIRECTIVES STRICTES]
- R√©pondez uniquement dans ce format JSON:
{{
    "scores": {{
        "alignement_triz": <1-5>,
        "innovation": <1-5>,
        "faisabilite": <1-5>,
        "impact": <1-5>,
        "clarte": <1-5>
    }},
    "analyse": "<texte de 2-3 phrases r√©sumant l'√©valuation>"
}}
"""

    try:
        response = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[{"role": "user", "content": evaluation_prompt}],
            temperature=0.2,
            max_tokens=500
        )
        evaluation_text = response.choices[0].message.content
        
        # Extraction du JSON
        json_match = re.search(r'\{[\s\S]*\}', evaluation_text)
        if json_match:
            eval_data = json.loads(json_match.group(0))
            return eval_data
        else:
            return {
                "scores": {
                    "alignement_triz": 3,
                    "innovation": 3,
                    "faisabilite": 3,
                    "impact": 3, 
                    "clarte": 3
                },
                "analyse": "√âvaluation par d√©faut suite √† une erreur d'analyse."
            }
    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur √©valuation: {str(e)}")
        return {
            "scores": {
                "alignement_triz": 3,
                "innovation": 3,
                "faisabilite": 3,
                "impact": 3,
                "clarte": 3
            },
            "analyse": f"Erreur d'√©valuation: {str(e)}"
        }

def create_principles_network(principles_list: List[int], all_principles: Dict) -> None:
    """Cr√©e une visualisation en r√©seau des principes et leurs relations"""
    try:
        G = nx.Graph()
        
        # Ajout des n≈ìuds (principes)
        for p_num in principles_list:
            if p_num in all_principles:
                p_info = all_principles[p_num]
                G.add_node(p_num, label=f"{p_num}. {p_info.get('title', '')}")
        
        # Ajout des ar√™tes (relations entre principes)
        for i, p1 in enumerate(principles_list):
            for j, p2 in enumerate(principles_list):
                if i < j:  # Pour √©viter les doublons
                    G.add_edge(p1, p2, weight=1)
        
        # Cr√©ation de la visualisation
        pos = nx.spring_layout(G, seed=42)
        
        # Cr√©ation du graphique avec Plotly
        edge_x = []
        edge_y = []
        for edge in G.edges():
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x.extend([x0, x1, None])
            edge_y.extend([y0, y1, None])
            
        edge_trace = go.Scatter(
            x=edge_x, y=edge_y,
            line=dict(width=1, color='#888'),
            hoverinfo='none',
            mode='lines')
        
        node_x = []
        node_y = []
        node_text = []
        for node in G.nodes():
            x, y = pos[node]
            node_x.append(x)
            node_y.append(y)
            node_text.append(f"{node}. {all_principles[node].get('title', '')}")
            
        node_trace = go.Scatter(
            x=node_x, y=node_y,
            mode='markers+text',
            text=node_text,
            textposition="top center",
            marker=dict(
                showscale=False,
                colorscale='YlGnBu',
                size=30,
                color=[],
                line_width=2))
        
        # Couleur bas√©e sur le degr√© de connexion
        node_degrees = dict(G.degree())
        node_trace.marker.color = [node_degrees[node] for node in G.nodes()]
        
        fig = go.Figure(data=[edge_trace, node_trace],
                     layout=go.Layout(
                        title='Relations entre principes TRIZ',
                        titlefont_size=16,
                        showlegend=False,
                        hovermode='closest',
                        margin=dict(b=20,l=5,r=5,t=40),
                        xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                        yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))
                        )
        
        st.plotly_chart(fig, use_container_width=True)
        
    except Exception as e:
        if st.session_state.get('debug_mode', False):
            st.error(f"Erreur r√©seau principes: {str(e)}")

# =============================================
# INTERFACE UTILISATEUR
# =============================================

# Chargement de la matrice TRIZ
triz_matrix = load_triz_matrix()
triz_principles = load_triz_principles()

# Tabs pour organiser l'interface
tab1, tab2, tab3 = st.tabs(["üìù D√©finition du probl√®me", "üß© Solutions TRIZ", "üìä Analyse avanc√©e"])

with tab1:
    st.markdown("### D√©crivez votre probl√®me technique")
    
    example_problems = [
        "Comment r√©duire le poids d'une bicyclette tout en conservant sa r√©sistance m√©canique?",
        "Comment augmenter la vitesse d'une imprimante sans diminuer la qualit√© d'impression?",
        "Comment r√©duire la consommation d'√©nergie d'un r√©frig√©rateur sans diminuer sa capacit√© de refroidissement?"
    ]
    selected_example = st.selectbox("Exemples de probl√®mes", [""] + example_problems)
    
    problem_text = st.text_area(
        "D√©crivez le probl√®me technique √† r√©soudre",
        value=selected_example if selected_example else "",
        height=150
    )
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button("Identifier la contradiction", type="primary"):
            if problem_text:
                with st.spinner("Analyse de la contradiction en cours..."):
                    contradiction_params = extract_contradiction_parameters(problem_text)
                    if contradiction_params:
                        st.session_state['contradiction_params'] = contradiction_params
                        st.session_state['problem_text'] = problem_text
                        param_improve, param_degrade = contradiction_params
                        
                        st.markdown(f"""
                        <div class='param-box improve-param'>
                            <strong>Param√®tre √† am√©liorer:</strong> #{param_improve[0]} - {param_improve[1]}
                        </div>
                        <div class='param-box degrade-param'>
                            <strong>Param√®tre qui se d√©grade:</strong> #{param_degrade[0]} - {param_degrade[1]}
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Trouver principes recommand√©s
                        principles_nums = get_principles_from_matrix(param_improve[0], param_degrade[0], triz_matrix)
                        
                        # Si aucun principe trouv√© dans la matrice, demander au LLM
                        if not principles_nums:
                            st.warning("Aucun principe trouv√© dans la matrice pour cette contradiction. Consultation de l'expert TRIZ...")
                            with st.spinner("Recherche de principes pertinents..."):
                                principles_nums = get_principles_from_llm(problem_text, param_improve, param_degrade)
                                if principles_nums:
                                    st.success(f"Principes recommand√©s par l'expert TRIZ: {', '.join(map(str, principles_nums))}")
                                else:
                                    st.error("Impossible de trouver des principes pertinents pour cette contradiction.")
                        
                        if principles_nums:
                            st.session_state['principles_nums'] = principles_nums
                            principles_info = {num: triz_principles.get(num, {}) for num in principles_nums}
                            st.session_state['principles_info'] = principles_info
                            
                            st.markdown("### Principes TRIZ recommand√©s:")
                            
                            for num, info in principles_info.items():
                                st.markdown(f"""
                                <div class='principle-card'>
                                    <strong>Principe #{num} - {info.get('title', 'Principe')}:</strong><br>
                                    {info.get('description', 'Description non disponible')}
                                </div>
                                """, unsafe_allow_html=True)
                    else:
                        st.error("Impossible d'identifier une contradiction TRIZ claire dans le probl√®me.")
            else:
                st.warning("Veuillez d√©crire le probl√®me technique.")
    
    with col2:
        st.markdown("### √Ä propos de TRIZ")
        st.markdown("""
        TRIZ est une m√©thode syst√©matique pour r√©soudre les probl√®mes techniques en identifiant les contradictions et en appliquant des principes d'innovation √©prouv√©s.
        
        1. Identifiez votre probl√®me technique
        2. Analysez la contradiction sous-jacente
        3. Appliquez les principes TRIZ recommand√©s
        4. D√©veloppez des solutions concr√®tes
        
        La matrice de contradictions TRIZ propose des principes d'innovation pour r√©soudre chaque type sp√©cifique de contradiction technique.
        """)

with tab2:
    if 'contradiction_params' in st.session_state and 'principles_nums' in st.session_state:
        st.markdown("### Solutions g√©n√©r√©es par principes TRIZ")
        
        param_improve, param_degrade = st.session_state['contradiction_params']
        principles_nums = st.session_state['principles_nums']
        principles_info = st.session_state['principles_info']
        problem_text = st.session_state['problem_text']
        
        st.markdown(f"""
        <div style='background-color: #f0f7fb; padding: 10px; border-radius: 8px; margin-bottom: 20px;'>
            <strong>Probl√®me:</strong> {problem_text}<br>
            <strong>Contradiction:</strong> Am√©liorer <span style='color:#1890ff'><strong>#{param_improve[0]} {param_improve[1]}</strong></span> 
            d√©grade <span style='color:#ff4d4f'><strong>#{param_degrade[0]} {param_degrade[1]}</strong></span>
        </div>
        """, unsafe_allow_html=True)
        
        if 'solutions_generated' not in st.session_state:
            if st.button("G√©n√©rer des solutions", type="primary"):
                with st.spinner("G√©n√©ration des solutions TRIZ en cours..."):
                    principles_dict = {num: principles_info[num] for num in principles_nums}
                    solutions_text = generate_solutions_from_principles(
                        problem_text, 
                        param_improve, 
                        param_degrade, 
                        principles_dict
                    )
                    st.session_state['solutions_text'] = solutions_text
                    st.session_state['solutions_generated'] = True
                    
                    # Extraction des solutions individuelles
                    pattern = r'### Principe #(\d+) - ([^\n]+)([\s\S]*?)(?=### Principe #\d+|$)'
                    matches = re.finditer(pattern, solutions_text)
                    
                    individual_solutions = []
                    for match in matches:
                        principle_num = int(match.group(1))
                        principle_title = match.group(2).strip()
                        solution_content = match.group(3).strip()
                        
                        if principle_num in principles_nums:
                            principle_info = {principle_num: principles_info.get(principle_num, {})}
                            
                            # G√©n√©ration d'illustration conceptuelle
                            concept_image = generate_technical_diagram(solution_content, principle_info)
                            
                            # √âvaluation de la solution
                            evaluation = evaluate_triz_solution(solution_content, principle_info)
                            
                            individual_solutions.append({
                                'principle_num': principle_num,
                                'principle_title': principle_title,
                                'content': solution_content,
                                'image': concept_image,
                                'evaluation': evaluation
                            })
                    
                    st.session_state['individual_solutions'] = individual_solutions
        
        if 'solutions_generated' in st.session_state and 'individual_solutions' in st.session_state:
            solutions = st.session_state['individual_solutions']
            
            # Cr√©ation d'un s√©lecteur pour les solutions
            solution_options = [f"Principe #{sol['principle_num']} - {sol['principle_title']}" for sol in solutions]
            selected_solution_idx = st.selectbox("Explorer les solutions", range(len(solution_options)), format_func=lambda i: solution_options[i])
            
            if selected_solution_idx is not None:
                sol = solutions[selected_solution_idx]
                
                st.markdown(f"""
                <div class='solution-card'>
                    <h3>Principe #{sol['principle_num']} - {sol['principle_title']}</h3>
                    {sol['content']}
                </div>
                """, unsafe_allow_html=True)
                
                # Affichage de l'image conceptuelle
                if 'image' in sol:
                    col1, col2 = st.columns([2, 1])
                    with col1:
                        st.image(sol['image'], caption=f"Illustration conceptuelle - Principe #{sol['principle_num']}", use_column_width=True)
                    
                    with col2:
                        if 'evaluation' in sol:
                            eval_data = sol['evaluation']
                            st.markdown("<div class='evaluation-card'>", unsafe_allow_html=True)
                            st.markdown("#### √âvaluation TRIZ")
                            
                            scores = eval_data.get('scores', {})
                            for criterion, score in scores.items():
                                st.markdown(f"<p class='progress-text'>{criterion.title()}</p>", unsafe_allow_html=True)
                                st.progress(score/5)
                            
                            st.markdown(f"<p><em>{eval_data.get('analyse', 'Pas d\'analyse disponible')}</em></p>", unsafe_allow_html=True)
                            st.markdown("</div>", unsafe_allow_html=True)
                
                # Options d'exportation
                st.download_button(
                    label="üì• Exporter solution (PDF)",
                    data="Solution TRIZ exportable",
                    file_name=f"triz_solution_{sol['principle_num']}.pdf",
                    mime="application/pdf",
                    disabled=True
                )
    else:
        st.info("Veuillez d'abord identifier la contradiction dans l'onglet 'D√©finition du probl√®me'.")

with tab3:
    if 'contradiction_params' in st.session_state and 'principles_nums' in st.session_state:
        st.markdown("### Analyse avanc√©e des principes TRIZ")
        
        if 'principles_nums' in st.session_state:
            principles_nums = st.session_state['principles_nums']
            principles_info = st.session_state['principles_info']
            
            # Visualisation en r√©seau des principes
            st.markdown("#### Relations entre principes recommand√©s")
            create_principles_network(principles_nums, triz_principles)
            
            # Analyse s√©mantique des principes
            st.markdown("#### Analyse s√©mantique des solutions")
            
            if 'individual_solutions' in st.session_state:
                solutions = st.session_state['individual_solutions']
                
                # Comparaison des solutions
                if len(solutions) > 1:
                    st.markdown("#### Comparaison des solutions")
                    
                    # Cr√©ation du DataFrame pour radar chart
                    eval_data = []
                    categories = []
                    
                    for sol in solutions:
                        if 'evaluation' in sol and 'scores' in sol['evaluation']:
                            principle_label = f"P{sol['principle_num']}"
                            scores = sol['evaluation']['scores']
                            eval_data.append(list(scores.values()))
                            categories.append(principle_label)
                    
                    if eval_data:
                        # Cr√©ation du radar chart avec Plotly
                        categories = ['Alignement', 'Innovation', 'Faisabilit√©', 'Impact', 'Clart√©']
                        
                        fig = go.Figure()
                        
                        for i, data in enumerate(eval_data):
                            fig.add_trace(go.Scatterpolar(
                                r=data,
                                theta=categories,
                                fill='toself',
                                name=f"Principe #{solutions[i]['principle_num']}"
                            ))
                        
                        fig.update_layout(
                            polar=dict(
                                radialaxis=dict(
                                    visible=True,
                                    range=[0, 5]
                                )
                            ),
                            showlegend=True
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Veuillez d'abord identifier la contradiction dans l'onglet 'D√©finition du probl√®me'.")

# Options avanc√©es dans la sidebar
with st.sidebar:
    st.title("‚ÑπÔ∏è √Ä propos de TRIZ")
    
    st.markdown("""
    **TRIZ** (Th√©orie de R√©solution des Probl√®mes Inventifs) est une m√©thodologie syst√©matique pour r√©soudre les probl√®mes techniques complexes en identifiant et surmontant les contradictions fondamentales.
    
    **Fonctionnalit√©s de cet outil :**
    - Identification automatique des contradictions techniques
    - Application des 40 principes TRIZ
    - G√©n√©ration de solutions innovantes
    - √âvaluation des solutions propos√©es
    
    **Mod√®le utilis√© :**
    - `llama-3.3-70b-versatile` pour l'analyse et la g√©n√©ration
    
    Cet assistant expert vous guide pas √† pas dans la r√©solution de probl√®mes techniques complexes selon la m√©thodologie TRIZ.
    """)
    
    # Debug mode (pour d√©veloppement)
    debug_mode = st.checkbox("Mode d√©bogage", value=False, key="debug_mode")
    
    if debug_mode:
        st.write("### Informations de d√©bogage")
        if 'contradiction_params' in st.session_state:
            st.write("Contradiction identifi√©e:", st.session_state['contradiction_params'])
        if 'principles_nums' in st.session_state:
            st.write("Principes recommand√©s:", st.session_state['principles_nums'])
        
        # D√©tails matrice
        st.write("### Matrice TRIZ")
        st.write("Param√®tres lignes:", len(triz_matrix["param_rows"]))
        st.write("Param√®tres colonnes:", len(triz_matrix["param_cols"]))

######## the final and the best code #############